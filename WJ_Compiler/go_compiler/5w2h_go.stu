   0.前置说明:如何从整体看待一门程序设计语言? what 
-----------------------------------------------------------------------------------------------------------   
        0.1 高级语言特性:
y            0.1.1  语言组织
                -- 标识符和关键字
                -- 变量和常量
                -- 表达式
                -- 简单句
                -- 控制结构
            
            0.1.2 类型系统
                -- 动静特性: 动态语言还是静态语言
                -- 类型强弱: 强类型还是弱类型
                -- 基本数据类型:包括类型及其支持的运算和操作集合
                -- 自定义数据类型:
            
            0.1.3 抽象特性
                -- 函数:是否支持函数,匿名函数,高阶函数,闭包等.
                -- 面向对象:是否支持面向对象
                -- 多态:如何支持多态
                -- 接口:是否支持接口,以及接口的实现方式

            0.1.4 元编程特性:
                -- 泛型:是否支持泛型
                -- 反射:是否支持反射

            0.1.5 运行和跨平台语言特性:
                -- 编译模式: 是编译型还是解释型,编译成中间代码还是直接到可执行程序.
                -- 运行时: 基于OS加载运行,还是给虚拟机加载运行
                -- 并发支持: 是否原生支持并发,还是库支持
                -- 交叉编译:是否支持交叉编译   
                -- 跨平台支持:是否支持跨平台

        0.2 生态
            轮子多不多?
            有没有企业级应用?
            社区活不活跃?
---------------------------------------------------------------------------------------------------------------
        1.1 GO的语言特性:
            1.1.1  语言组织
                -- 标识符和关键字  -> 25个关键字和保留字
                -- 变量和常量       
                -- 表达式
                -- 简单句
                -- 控制结构        -> 支持顺序,循环分支
            
            1.1.2 类型系统
                -- 动静特性: 动态语言还是静态语言  -> 静态语言,支持运行时动态类型 
                -- 类型强弱: 强类型还是弱类型      -> 强类型,支持隐式推倒,类型安全
                -- 基本数据类型:    
                -- 自定义数据类型: -> 支持type 自定义
            
            1.1.3 抽象特性
                -- 函数:是否支持函数,匿名函数,高阶函数,闭包等.  -> 支持
                -- 面向对象:是否支持面向对象    -> 类型组合支持面向对象
                -- 多态:如何支持多态            -> 通过接口支持(无继承)
                -- 接口:是否支持接口,以及接口的实现方式 -> Duck模型(非显示声明)

            1.1.4 元编程特性:
                -- 泛型:是否支持泛型    -> (支持的不是很好)
                -- 反射:是否支持反射    -> 支持

            1.1.5 运行和跨平台语言特性:
                -- 编译模式: 是编译型还是解释型,编译成中间代码还是直接到可执行程序. -> 编译成可执行程序
                -- 运行时: 基于OS加载运行,还是给虚拟机加载运行          -> 直接运行,支持垃圾回收
                -- 并发支持: 是否原生支持并发,还是库支持                -> 语言原生支持
                -- 交叉编译:是否支持交叉编译                            -> 支持交叉编译
                -- 跨平台支持:是否支持跨平台                            -> 支持

        0.2 生态
            轮子多不多?
            有没有企业级应用?
            社区活不活跃?


---------------------------------------------------------------------------------------------------------------


   go_history-- go语言解决什么问题?
        1.1 解决大型项目编译慢
        1.2 解决并发编程困难
        1.3 解决模块化代码臃肿


