 
            4.2.1 关键字
                --引导程序整体结构关键字--
                4.2.1.1 package //定义包名的关键字
                4.2.1.2 import  //导入包名关键字
                4.2.1.3 const   //常量声明关键字
                4.2.1.4 var     //变量声明关键字
                4.2.1.5 func    //函数定义关键字
                4.2.1.6 defer   //延迟执行关键字
                4.2.1.7 go      //并发语法糖关键字
                4.2.1.8 return  //函数返回关键字
                4.2.1.13 type
                --声明复合数据结构的4个关键字--
                4.2.1.9   struct  //定义结构类型关键字  
                4.2.1.10  interface //定义接口类型关键字
                4.2.1.11   map      //声明或创建map类型关键字
                4.2.1.12   chan     //声明或创建通道类型关键字
    1.Go词法
        1.1 词法的基本组成要素:
-------------------------(词法:token,原理)----------------------------------------------
            1.1.1 token --抽象词法单元
                理论模型:
                const
                {
                    _token:  iota

                    (情况一:标识符)identifilers: const {
                            _identifilers: iota 
                            (标识类型一:)用户自定义标识符: const{
                                包命:
                                变量命:
                                常量名:
                                函数名:
                                自定义类型名:
                                方法名:
                            }
                            (识别类型二)预声明标识符const{
                                keywords :关键字
                                其他预声明标识符 [内置数据类型标识符号,常量标识符,空白标识符,内置函数]
                                
                            }
                                
                    }

                    (操作符)oprators:  

                    (分隔符)delimiters:

                    (字面量)literals: const{
                            整型字面量:
                            浮点型字面量:
                            复数类型字面量:
                            字符串字面量:
                            字符型字面量:
                    }         
                }
 -------------------------------------------------------------------------------

    2.如何分词? (如何将一个连续字符串,划分成不同的单元?)
        2.1.要有预先定义好的分隔符号
        2.2.根据分隔符号将字符串切割成词法单元



----------------------------------(词法:分隔符)-----------------------------------------------
    3.Go中的分隔符号的简介:
        3.1.分隔符不是唯一的,有多种分隔符号
        
        3.2.分隔符分类
            3.2.1 纯分隔符号: 无语法含义,只做为分词标识.
                 此类别的分隔符号包括: (这种分隔符多个和起来也就算一个)  
                                        -- 空格
                                        -- 制表符
                                        -- 换行符
                                        -- 回车符
            3.2.2 操作符号
                分隔词法单元,并且自己也算词法单元.

--------------------------------------(词法:标识符)--------------------------------------------------
    4.标识符号
        4.1 自定义标识符号使用注意: 
            4.1.1. 用户自定义的标识符,不要和预声明标识符冲突 
            4.1.2. 开头下划线,字母 后面任意多个字符,数字或下划线

        4.2 预声明标识符号:
            4.2.1 关键字
                --引导程序整体结构关键字--
                4.2.1.1 package //定义包名的关键字
                4.2.1.2 import  //导入包名关键字
                4.2.1.3 const   //常量声明关键字
                4.2.1.4 var     //变量声明关键字
                4.2.1.5 func    //函数定义关键字
                4.2.1.6 defer   //延迟执行关键字
                4.2.1.7 go      //并发语法糖关键字
                4.2.1.8 return  //函数返回关键字
                4.2.1.13 type
                --声明复合数据结构的4个关键字--
                4.2.1.9   struct  //定义结构类型关键字  
                4.2.1.10  interface //定义接口类型关键字
                4.2.1.11   map      //声明或创建map类型关键字
                4.2.1.12   chan     //声明或创建通道类型关键字
                
                --控制程序结构关键字--
                4.2.1.14    if else 
                4.2.1.15    for range  break continue
                4.2.1.16    switch select case default fallthrough
                4.2.1.17    goto
           
           4.2.2 内置数据类型标识符(20个)
                4.2.2.1 数值(16个)
                    整型(12个)
                        byte int8 int16 int32 int64 int
                        uint8 uint uint16 uint32 uint64 uintptr

                    浮点型
                        float64 float32
                    
                    字符和字符串型
                        string rune

                    接口型 
                        error

                    布尔型 
                        bool

            4.2.3 内置函数(15个)
                4.2.3.1 make
                4.2.3.2 new
                4.2.3.3 len
                4.2.3.4 cap
                4.2.3.5 append
                4.2.3.6 copy
                4.2.3.7 delete
                4.2.3.8 panic
                        有什么用?
                        panic：
                            1、内建函数
                            
                            2、假如函数F中书写了panic语句，会终止其后要执行的代码，
                                在panic所在函数F内如果存在要执行的defer函数列表，按照defer的逆序执行
                            
                            3、返回函数F的调用者G，在G中，调用函数F语句之后的代码不会执行，
                                假如函数G中存在要执行的defer函数列表，按照defer的逆序执行，
                                 这里的defer 有点类似 try-catch-finally 中的 finally

                            4、直到goroutine整个退出，并报告错误

                            作者：小杰的快乐时光
                            链接：https://www.jianshu.com/p/0cbc97bd33fb
                            来源：简书
                            著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

                4.2.3.9 recover
                        有什么用?
                            
                4.2.3.10 close
                4.2.3.11 complex
                4.2.3.12 real
                4.2.3.13 image
                4.2.3.14 Print ?????????? 都是小写?
                4.2.3.15 Println ????????? 都是小写?

            4.2.4 常量标识符
                true false
                iota //在枚举中使用
                nil  //引用/指针的null值 
            
            4.2.5 _ (空白标识符) 
                做占位符号


    ------------------------------------------(词法:操作符和分隔符号)---------------------------------------------------------
        
    5.1 操作符和分隔符
            5.1.1 算术运算符
                + 加法
                - 减法
                * 乘法
                / 除法
                % 取余

            5.1.2 位运算符
                & : 按位与 两个位都为1时，结果才为1 
                | : 按位或 两个位都为0时，结果才为0
                ^ : 两个位相同为0，相异为1
               &^ : 位清空 (AND NOT)
                >>: 各二进位全部右移若干位，高位丢弃，低位补0
                <<: 各二进位全部左移若干位，高位丢弃，低位补0
                
            5.1.3 赋值
                = := += -= *= /= %= >>= <<= &= |= ^= &^=
            
            5.1.4 比较运算符
                > >= < <= ==!=
            
            5.1.5 括号 
                () {} []

            5.1.6 逻辑运算符  
                && || !

            5.1.7 自增自减操作符 
                ++ --

            5.1.8 其他运算符
                : , ; . ... <-


    -------------------------------[词法:字面常量]----------------------------------------------------------------
        整型字面量: 42 0600 0xBad 11234324234234
        浮点字面量: 0. 72.40 072.40 2.71828 1E6
        复数类型字面量: 0i 011i 6.2e-11i 
        字符型字面量: 'a' '本' '\x377' '\000' 'u12e4'
        字符串字面量: "\n" "\"" "hello,world!"

    -------------------------------[词法:实现分词器]----------------------------------------------------------------
    猜测:
        输入: unicode 字符文件.
        输出: tokens 一堆token

        应该怎么组织 token(最小词法单元这个结构)?
            
            源码:
                tokens.go //实现了前面的一堆分析的情况.
                token_string.go //一个优化访问的索引结构
                source.go // go source文本阅读器
                scanner.go //分词器
                
        scanner 结构:{
          source --> 要有一个文本阅读器
            mode uint --> 模式
            nlsemi bool --> 是否将\n 和 EOF 翻译成; 

            //


        }

    -------------------------------[词法:作用域]----------------------------------------------------------------
    6.Block
        在一个{}内的可空的声明和语句序列.
        

    


    -------------------------------[词法:字面常量]----------------------------------------------------------------
    -------------------------------[词法:字面常量]----------------------------------------------------------------
    -------------------------------[词法:字面常量]----------------------------------------------------------------
    -------------------------------[词法:字面常量]----------------------------------------------------------------
    -------------------------------[词法:字面常量]----------------------------------------------------------------
    


















        
            

















        

